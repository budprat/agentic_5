# ABOUTME: Travel domain specific types for trip planning and booking
# ABOUTME: Contains TripInfo, PlannerTask, and travel-specific TaskList definitions

from typing import Any, List, Optional
from pydantic import BaseModel, Field


class PlannerTask(BaseModel):
    """Represents a single task generated by the Travel Planner."""

    id: int = Field(description='Sequential ID for the task.')
    description: str = Field(description='Task description.')
    status: str = Field(
        description='Task status one of: pending, in_progress, completed.'
    )


class TripInfo(BaseModel):
    """Trip Info for travel planning."""

    total_budget: Optional[str] = Field(description='Total Budget for the trip')
    origin: Optional[str] = Field(description='Trip Origin')
    destination: Optional[str] = Field(description='Trip destination')
    type: Optional[str] = Field(description='Trip type, business or leisure')
    start_date: Optional[str] = Field(description='Trip Start Date')
    end_date: Optional[str] = Field(description='Trip End Date')
    travel_class: Optional[str] = Field(
        description='Travel class, first, business or economy'
    )
    accomodation_type: Optional[str] = Field(
        description='Luxury Hotel, Budget Hotel, AirBnB, etc'
    )
    room_type: Optional[str] = Field(description='Suite, Single, Double etc.')
    is_car_rental_required: Optional[str] = Field(
        description='Whether a rental car is required in the trip.'
    )
    type_of_car: Optional[str] = Field(
        description='Type of the car, SUV, Sedan, Truck etc.'
    )
    no_of_travellers: Optional[str] = Field(
        description='Total number of travellers in the trip'
    )
    checkin_date: Optional[str] = Field(description='Hotel Checkin Date')
    checkout_date: Optional[str] = Field(description='Hotel Checkout Date')
    car_rental_start_date: Optional[str] = Field(
        description='Car Rental Start Date'
    )
    car_rental_end_date: Optional[str] = Field(
        description='Car Rental End Date'
    )


class TravelTaskList(BaseModel):
    """Output schema for the Travel Planner Agent."""
    original_query: Optional[str] = Field(
        description='The original user query for context.'
    )
    trip_info: Optional[TripInfo] = Field(description='Trip information')
    tasks: List[PlannerTask] = Field(
        description='A list of travel tasks to be executed sequentially.'
    )


class TravelAgentResponse(BaseModel):
    """Travel-specific Agent Response that either has a task list or requires user input."""

    status: Literal['completed', 'input_required']
    message: Optional[str] = Field(description='Response Message')
    task_list: Optional[TravelTaskList] = Field(description='Task List')
    question: Optional[str] = Field(description='Question for the user')