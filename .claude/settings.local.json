{
  "permissions": {
    "allow": [
      "Bash(chmod:*)",
      "Bash(ls:*)",
      "mcp__puppeteer__puppeteer_navigate",
      "mcp__supabase__list_tables",
      "mcp__brave__brave_web_search",
      "mcp__notionAI__API-get-self",
      "mcp__context7__resolve-library-id",
      "mcp__upstash__redis_database_list_databases",
      "mcp__brightdata__session_stats",
      "Bash(find:*)",
      "Bash(./check_services.py)",
      "Bash(python test_mcp_servers.py:*)",
      "Bash(uv run:*)",
      "Bash(uv pip:*)",
      "Bash(timeout 5 uv run python snowflake_mcp.py 2 >& 1)",
      "mcp__snowflake__execute_query",
      "Bash(python:*)",
      "Bash(uv:*)",
      "WebFetch(domain:medium.com)",
      "mcp__brightdata__scrape_as_markdown",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "mcp__context7__get-library-docs",
      "WebFetch(domain:www.osintessentials.com)",
      "mcp__supabase__search_docs",
      "mcp__supabase__get_project_url",
      "mcp__supabase__list_extensions",
      "mcp__supabase__get_anon_key",
      "mcp__supabase__list_branches",
      "mcp__supabase__get_logs",
      "mcp__supabase__execute_sql",
      "mcp__supabase__get_advisors",
      "mcp__supabase__generate_typescript_types",
      "mcp__supabase__list_migrations",
      "mcp__supabase__apply_migration",
      "mcp__sequential-thinking__sequentialthinking",
      "Bash(grep:*)",
      "Bash([ -n \"$GOOGLE_API_KEY\" ])",
      "Bash(source .env)",
      "Bash(curl:*)",
      "Bash(rm:*)",
      "Bash(export:*)",
      "Bash(rg:*)",
      "Bash(docker:*)",
      "Bash(timeout:*)",
      "WebFetch(domain:status.api.semanticscholar.org)",
      "Bash(git push:*)",
      "Bash(npx firecrawl-mcp:*)",
      "Bash(npm view:*)",
      "Bash(npm cache clean:*)",
      "Bash(npx:*)",
      "Bash(git config:*)",
      "Bash(git check-ignore:*)",
      "Bash(git ls-tree:*)",
      "mcp__firecrawl__firecrawl_search",
      "mcp__firecrawl__firecrawl_scrape",
      "Bash(mkdir:*)",
      "Bash(mv:*)",
      "Bash(git checkout:*)",
      "Bash(cp:*)",
      "Bash(cat:*)",
      "Bash(pip install:*)",
      "Bash(pkill:*)",
      "Bash(journalctl:*)",
      "mcp__brave__brave_local_search",
      "mcp__ide__getDiagnostics",
      "mcp__ide__executeCode",
      "Bash(env)",
      "Bash(./run_solopreneur_agents.sh:*)",
      "Bash(./stop_solopreneur_agents.sh:*)",
      "Bash(./check_solopreneur_status.sh:*)",
      "Bash(./start_a2a_mcp_server.sh:*)",
      "Bash(true)",
      "Bash(echo:*)",
      "Bash(pgrep:*)",
      "Bash(./run_mcp_server.sh:*)",
      "Bash(# First, check if Oracle is still trying to run\nps aux | grep \"\"10901\"\" | grep -v grep | awk ''{print $2}'' | xargs -r kill -9 2>/dev/null\n\n# Export the environment variable\nexport GOOGLE_API_KEY=$(grep GOOGLE_API_KEY .env | cut -d ''='' -f2 | tr -d ''\"\"'')\n\n# Start the Oracle agent properly\n\\\nexport GOOGLE_API_KEY=\"\"$GOOGLE_API_KEY\"\" && \\\nuv run python src/a2a_mcp/agents/__main__.py --agent-card agent_cards/solopreneur_oracle_agent.json --port 10901 > logs/oracle_restart2.log 2>&1 &\n\necho \"\"Starting Oracle agent with API key...\"\"\nsleep 5)",
      "Bash(# Start Oracle agent with proper environment\nexport GOOGLE_API_KEY=$(grep GOOGLE_API_KEY .env | cut -d ''='' -f2 | tr -d ''\"\"'')\ncd /home/user/solopreneur\nuv run python src/a2a_mcp/agents/__main__.py --agent-card agent_cards/solopreneur_oracle_agent.json --port 10901 > logs/oracle_restart3.log 2>&1 &\n\necho \"\"Oracle agent starting...\"\"\nsleep 8)",
      "Bash(touch:*)",
      "Bash(kill:*)",
      "Bash(__NEW_LINE__ python -c \"\nimport json\nfrom datetime import datetime\n\n# Generate comprehensive system report\nreport = {\n    ''timestamp'': datetime.now().isoformat(),\n    ''system'': ''Solopreneur Oracle with A2A-MCP Integration'',\n    ''test_results'': {\n        ''infrastructure'': {\n            ''status'': ''OPERATIONAL'',\n            ''services_running'': 6,\n            ''services_expected'': 6,\n            ''success_rate'': ''100%''\n        },\n        ''a2a_protocol'': {\n            ''status'': ''FULLY_FUNCTIONAL'', \n            ''domain_agents_responding'': 5,\n            ''domain_agents_expected'': 5,\n            ''success_rate'': ''100%''\n        },\n        ''oracle_coordination'': {\n            ''status'': ''EXCELLENT'',\n            ''domain_coordination'': 3,\n            ''analysis_completeness'': ''5/5 fields'',\n            ''confidence_score'': 0.62,\n            ''technical_feasibility'': ''75/100'',\n            ''personal_sustainability'': ''75/100''\n        },\n        ''streaming_capability'': {\n            ''status'': ''WORKING'',\n            ''sse_events'': 7,\n            ''task_completion'': ''SUCCESS'',\n            ''domain_coordination_events'': 1\n        },\n        ''performance'': {\n            ''status'': ''PASSED'',\n            ''concurrent_requests'': 3,\n            ''success_rate'': ''100%'',\n            ''avg_response_time'': ''19.6s'',\n            ''total_execution_time'': ''23.9s''\n        }\n    },\n    ''fixes_applied'': [\n        ''Switched Oracle communication from message/stream to message/send'',\n        ''Simplified JSON response parsing (eliminated SSE complexity)'',\n        ''Enhanced domain agent response extraction'',\n        ''Fixed protocol mismatch between Oracle and domain agents'',\n        ''Resolved TransferEncodingError issues from previous session''\n    ],\n    ''system_capabilities'': {\n        ''domain_coordination'': [''Technical Intelligence'', ''Personal Optimization'', ''Integration Synthesis'', ''Knowledge Management'', ''Learning Enhancement''],\n        ''response_formats'': [''JSON structured analysis'', ''Executive summaries'', ''Technical assessments'', ''Personal optimization'', ''Strategic insights''],\n        ''communication_protocols'': [''A2A JSON-RPC'', ''SSE Streaming'', ''Standard HTTP JSON''],\n        ''architecture_compliance'': ''A2A-MCP Framework compliant''\n    },\n    ''performance_metrics'': {\n        ''oracle_response_time'': ''11-24 seconds'',\n        ''domain_agent_response_time'': ''< 15 seconds'', \n        ''concurrent_request_handling'': ''Excellent (3/3 success)'',\n        ''system_stability'': ''High resilience with fallback mechanisms''\n    },\n    ''overall_status'': ''FULLY OPERATIONAL'',\n    ''confidence_level'': ''HIGH'',\n    ''ready_for_production'': True\n}\n\nprint(''🎯 SOLOPRENEUR ORACLE SYSTEM - COMPREHENSIVE TEST RESULTS'')\nprint(''='' * 65)\nprint(f''Test Date: {report[\"\"timestamp\"\"]}'')\nprint(f''Overall Status: {report[\"\"overall_status\"\"]} ✅'')\nprint(f''Production Ready: {\"\"YES\"\" if report[\"\"ready_for_production\"\"] else \"\"NO\"\"} ✅'')\nprint()\n\nprint(''📊 Test Results Summary:'')\nfor category, results in report[''test_results''].items():\n    status = results[''status'']\n    emoji = ''✅'' if status in [''OPERATIONAL'', ''FULLY_FUNCTIONAL'', ''EXCELLENT'', ''WORKING'', ''PASSED''] else ''⚠️''\n    print(f''  {emoji} {category.replace(\"\"_\"\", \"\" \"\").title()}: {status}'')\n\nprint()\nprint(''🔧 Key Fixes Applied:'')\nfor fix in report[''fixes_applied'']:\n    print(f''  ✅ {fix}'')\n\nprint()\nprint(''⚡ Performance Highlights:'')\nperf = report[''performance_metrics'']\nprint(f''  🚀 Oracle Response: {perf[\"\"oracle_response_time\"\"]}'')\nprint(f''  🏃 Domain Agents: {perf[\"\"domain_agent_response_time\"\"]}'')\nprint(f''  🔄 Concurrent Handling: {perf[\"\"concurrent_request_handling\"\"]}'')\nprint(f''  🛡️ System Stability: {perf[\"\"system_stability\"\"]}'')\n\nprint()\nprint(''🎉 SYSTEM VALIDATION COMPLETE - ALL TESTS PASSED!'')\nprint(''The Solopreneur Oracle is fully operational with A2A-MCP integration.'')\n\")",
      "Bash(./status_solopreneur_system.py)",
      "Bash(PYTHONPATH=. python -m src.a2a_mcp.agents --help)",
      "Bash(tree:*)",
      "Bash(~/google-cloud-sdk/bin/gcloud version)",
      "Bash(~/google-cloud-sdk/bin/gcloud auth login --no-launch-browser)",
      "Bash(~/google-cloud-sdk/bin/gcloud auth list)",
      "Bash(~/google-cloud-sdk/bin/gcloud auth application-default login --no-launch-browser)",
      "Bash(~/google-cloud-sdk/bin/gcloud config get-value project)",
      "Bash(~/google-cloud-sdk/bin/gcloud projects describe gen-lang-client-0871164439 --format=\"value(projectId,name)\")",
      "Bash(~/google-cloud-sdk/bin/gcloud config get-value compute/region)",
      "Bash(~/google-cloud-sdk/bin/gcloud config get-value compute/zone)",
      "Bash(~/google-cloud-sdk/bin/gcloud config set compute/region us-central1)",
      "Bash(~/google-cloud-sdk/bin/gcloud config set compute/zone us-central1-a)",
      "Bash(~/google-cloud-sdk/bin/gcloud services list --enabled --limit=5)",
      "Bash(~/google-cloud-sdk/bin/gcloud storage buckets create gs://sankhya --location=us-central1)",
      "Bash(~/google-cloud-sdk/bin/gcloud storage buckets create gs://sankhya-gen-lang-client-0871164439 --location=us-central1)",
      "Bash(~/google-cloud-sdk/bin/gcloud storage buckets describe gs://sankhya-gen-lang-client-0871164439)",
      "Bash(~/google-cloud-sdk/bin/gcloud storage ls gs://sankhya-gen-lang-client-0871164439/)",
      "Bash(~/google-cloud-sdk/bin/gcloud storage cp /tmp/placeholder gs://sankhya-gen-lang-client-0871164439/sankhya/)"
    ],
    "deny": []
  },
  "enableAllProjectMcpServers": true,
  "enabledMcpjsonServers": [
    "supabase",
    "snowflake",
    "sequential-thinking",
    "brightdata",
    "brave",
    "puppeteer",
    "context7",
    "upstash",
    "firecrawl",
    "notionAI"
  ]
}