# ABOUTME: Project configuration for the agentic-framework-boilerplate multi-agent system.
# ABOUTME: Defines dependencies, scripts, and build configuration for the Solopreneur Oracle ecosystem.

[project]
name = "agentic-framework-boilerplate"
version = "0.1.0"
description = "Agentic Framework Boilerplate - Multi-Agent System for Solopreneur Intelligence"
readme = "README.md"
requires-python = ">=3.11"
keywords = ["mcp", "agents", "ai", "framework", "solopreneur", "oracle"]
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
license = {text = "MIT"}
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    # Core A2A and MCP Dependencies
    "a2a-sdk>=0.2.1",
    "mcp[cli]>=1.5.0",
    "fastmcp>=1.0",
    
    # Google AI Platform Dependencies
    "google-adk>=1.0.0",
    "google-cloud-aiplatform>=1.91.0",
    "google-generativeai>=0.8.5",
    
    # LangChain Integration
    "langchain-google-genai>=2.0.10",
    "langchain-mcp-adapters>=0.0.9",
    "langgraph>=0.4.1",
    
    # Core Python Dependencies
    "click>=8.1.8",
    "httpx>=0.28.1",
    "pydantic>=2.11.4",
    "python-dotenv>=1.0.0",
    "aiohttp>=3.9.0",
    "requests>=2.32.0",
    
    # Data Processing
    "numpy>=2.2.5",
    "pandas>=2.2.3",
    "networkx>=3.4.2",
    
    # External Knowledge Integration
    "arxiv>=2.1.0",
    "semanticscholar>=0.8.2",
    "feedparser>=6.0.10",
    
    # Database Support
    "neo4j>=5.28.0",
    
    # Async Support
    "nest-asyncio>=1.6.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
]

docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.22.0",
]

all = [
    "agentic-framework-boilerplate[dev,docs]",
]

[project.scripts]
# Main system launchers
agentic-framework = "agentic_framework.cli:main"
start-system = "agentic_framework.launcher:main"
start-mcp-server = "agentic_framework.mcp_server:main"

# Agent management
start-agent = "agentic_framework.agents.runner:main"
list-agents = "agentic_framework.agents.registry:list_agents"

# Development utilities
validate-cards = "agentic_framework.utils.validate_cards:main"
system-health = "agentic_framework.utils.health_check:main"

[project.urls]
"Homepage" = "https://github.com/yourusername/agentic-framework-boilerplate"
"Bug Tracker" = "https://github.com/yourusername/agentic-framework-boilerplate/issues"
"Documentation" = "https://agentic-framework-boilerplate.readthedocs.io"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.version]
path = "src/agentic_framework/__init__.py"

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/agent_cards",
    "/config",
    "/README.md",
    "/LICENSE",
]

[tool.hatch.build.targets.wheel]
packages = ["src/agentic_framework"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = [
    "tests",
]
pythonpath = ["src"]
asyncio_mode = "auto"

[tool.coverage.run]
branch = true
source = ["src/agentic_framework"]

[tool.coverage.paths]
source = [
    "src/",
    "*/site-packages/",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.isort]
profile = "black"
line_length = 88
known_first_party = ["agentic_framework"]