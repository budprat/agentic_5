# type: ignore

from typing import Any, List, Literal, Optional, Union

from pydantic import BaseModel, Field, model_validator


class ServerConfig(BaseModel):
    """Server Confgiguration."""

    host: str
    port: int
    transport: str
    url: str


class PlannerTask(BaseModel):
    """Represents a single task generated by the Planner."""

    id: int = Field(description='Sequential ID for the task.')
    description: str = Field(
        description='Clear description of the task to be executed.'
    )
    status: Optional[
        Union[
            Any,
            Literal[
                'input_required',
                'completed',
                'error',
                'pending',
                'incomplete',
                'todo',
                'not_started',
            ],
        ]
    ] = Field(description='Status of the task', default='input_required')


class TaskList(BaseModel):
    """Output schema for the Planner Agent."""

    original_query: Optional[str] = Field(
        description='The original user query for context.'
    )

    tasks: List[PlannerTask] = Field(
        description='A list of tasks to be executed sequentially.'
    )


class AgentResponse(BaseModel):
    """Output schema for the Agent."""

    content: Union[str, dict] = Field(
        description='The content of the response.'
    )
    is_task_complete: bool = Field(description='Whether the task is complete.')
    require_user_input: bool = Field(
        description='Whether the agent requires user input.'
    )